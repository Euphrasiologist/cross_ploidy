assoc_data_updat <- fread("./data/Cross_ploidy_families.csv")
library(data.table)
assoc_data_updat <- fread("./data/Cross_ploidy_families.csv")
assoc_data_updat
cross_ploidy_expected
cross_ploidy_expected
all_ploidies_uniq <- unique(all_ploidies)
genus_family <- unique(all_ploidies_uniq[, .(Genus, Family)])
expected <- all_ploidies_uniq[Genus %in% all_ploidies_uniq[, .(.N), by = .(Genus)][N > 1]$Genus][
, .( {
# get all combinations of species
sp <- combn(paste0(Species, "--", Ploidy), 2)
tsp <- as.data.table(t(sp))
# extract ploidy
tsp[, V1P := gsub(".*--(.*)", "\\1", V1)]
tsp[, V2P := gsub(".*--(.*)", "\\1", V2)]
# remove from original columns
tsp[, V1 := gsub("(.*)--.*", "\\1", V1)]
tsp[, V2 := gsub("(.*)--.*", "\\1", V2)]
# filter out where sp1 == sp2
tsp <- tsp[V1 != V2]
paste(sum(tsp$V1P == tsp$V2P), sum(tsp$V1P != tsp$V2P), sep = "/")
}), by = .(Genus)
]
# add number of ploidies per family
# from the BSBI cytology database
# specifically it's a combination of the Cytotype_variation and
# Ploidy_variation tabs here:
# https://docs.google.com/spreadsheets/d/1caUbJUGC7Q5V2k6JPB8xcgwRdnNvFHyZeMu1VUaTWO0/edit#gid=211453887 # nolint
all_ploidies <- fread("./data/British_plant_ploidies.csv")
# multiple ploidies per species, let's extract those
all_ploidies <- all_ploidies[, .(
Ploidy = unlist(strsplit(Ploidy, ",")),
Genus,
Family
), by = .(Species)]
# format them
all_ploidies[, Ploidy := gsub(pattern = " ", replacement = "", Ploidy)]
all_ploidies[, Ploidy := gsub(pattern = "\\(.*", replacement = "", Ploidy)]
all_ploidies[, Ploidy := gsub(pattern = "\\?", replacement = "", Ploidy)]
all_ploidies[, Ploidy := as.integer(Ploidy)]
all_ploidies_merge <- all_ploidies[
, .(No_Ploidies = length(unique(Ploidy))),
by = .(Family)
]
assoc_data_updat <- all_ploidies_merge[assoc_data, on = .(Family)]
assoc_data_updat[, No_Ploidies := ifelse(is.na(No_Ploidies), -1, No_Ploidies)]
assoc_data_updat
all_ploidies_uniq <- unique(all_ploidies)
genus_family <- unique(all_ploidies_uniq[, .(Genus, Family)])
expected <- all_ploidies_uniq[Genus %in% all_ploidies_uniq[, .(.N), by = .(Genus)][N > 1]$Genus][
, .( {
# get all combinations of species
sp <- combn(paste0(Species, "--", Ploidy), 2)
tsp <- as.data.table(t(sp))
# extract ploidy
tsp[, V1P := gsub(".*--(.*)", "\\1", V1)]
tsp[, V2P := gsub(".*--(.*)", "\\1", V2)]
# remove from original columns
tsp[, V1 := gsub("(.*)--.*", "\\1", V1)]
tsp[, V2 := gsub("(.*)--.*", "\\1", V2)]
# filter out where sp1 == sp2
tsp <- tsp[V1 != V2]
paste(sum(tsp$V1P == tsp$V2P), sum(tsp$V1P != tsp$V2P), sep = "/")
}), by = .(Genus)
]
expected[, N_same := as.numeric(gsub("/.*", "", V1))]
expected[, N_cross := as.numeric(gsub(".*/", "", V1))]
expected[,V1 := NULL]
expected2 <- expected[genus_family, on = .(Genus)]
# remove Rubus... all those microspecies!
expected2 <- expected2[Genus != "Rubus"]
expected_props <- expected2[, .(N_same_ex = sum(N_same, na.rm = TRUE),
N_cross_ex = sum(N_cross, na.rm = TRUE)
), by = .(Family)]
observed_props <- assoc_data_updat[, .(Family, N_same, N_cross)]
obs_exp_final <- observed_props[expected_props, on = .(Family)]#[!is.nan(prop_same_ex)][!is.na(N_same_prop)]
# remove all zero entries
obs_exp_final <- obs_exp_final[!(N_same == 0 & N_cross == 0 & N_same_ex == 0 & N_cross_ex == 0)]
obs_exp_final <- obs_exp_final[!is.na(N_same)]
# remove iridaceae
obs_exp_final <- obs_exp_final[!Family %in% c("Iridaceae", "Asparagaceae", "Cucurbitaceae", "Campanulaceae", "Cyperaceae", "Liliaceae", "Linaceae", "Haloragaceae", "Grossulariaceae", "Ruppiaceae", "Crassulaceae", "Juncaginaceae", "Urticaceae", "Zosteraceae")]
cross_ploidy_expected <- list()
for(i in 1:nrow(obs_exp_final)) {
mat <- as.matrix(obs_exp_final[i, -1], nrow = 2, byrow = TRUE)
test <- chisq.test(c(mat[1], mat[2]), p = c(mat[3] / (mat[3] + mat[4]), mat[4] / (mat[3] + mat[4])))
if (!is.nan(test$p.value)) {
index <- index + 1
row <- c(obs_exp_final[i], test$p.value)
cross_ploidy_expected[[i]] <- row
}
}
for(i in 1:nrow(obs_exp_final)) {
mat <- as.matrix(obs_exp_final[i, -1], nrow = 2, byrow = TRUE)
test <- chisq.test(c(mat[1], mat[2]), p = c(mat[3] / (mat[3] + mat[4]), mat[4] / (mat[3] + mat[4])))
if (!is.nan(test$p.value)) {
row <- c(obs_exp_final[i], test$p.value)
cross_ploidy_expected[[i]] <- row
}
}
cross_ploidy_expected <- rbindlist(cross_ploidy_expected)
f <- function(a, b) {
a / (a + b)
}
cross_ploidy_expected[,
test := fifelse(V1 < 0.05, {t1 <- f(N_same, N_cross); t2 <- f(N_same_ex, N_cross_ex); fifelse(t1 > t2, "More same ploidy crosses", "More cross ploidy crosses")}, "Not significant")
]
setnames(cross_ploidy_expected,
new = c("Family",
"Number of same ploidy crosses",
"Number of cross ploidy crosses",
"Expected number of same ploidy crosses",
"Expected number of cross ploidy crosses",
"P-value from Chi-Square test",
"Cross bias"
)
)
cross_ploidy_expected
cross_ploidy_expected[, .(Family, `P-value from Chi-Square test`)][
assoc_data_updat, .(Family)
]
cross_ploidy_expected[, .(Family, `P-value from Chi-Square test`)][
assoc_data_updat, on = .(Family)
]
cross_ploidy_expected[, .(Family, `P-value from Chi-Square test`)][
assoc_data_updat, on = .(Family)
][, -c(N_cross_prop, N_same_prop)]
cross_ploidy_expected[, .(Family, `P-value from Chi-Square test`)][
assoc_data_updat, on = .(Family)
][, -.(N_cross_prop, N_same_prop)]
cross_ploidy_expected[, .(Family, `P-value from Chi-Square test`)][
assoc_data_updat, on = .(Family)
][, .(N_cross_prop, N_same_prop)]
cross_ploidy_expected[, .(Family, `P-value from Chi-Square test`)][
assoc_data_updat, on = .(Family)
][, .(-N_cross_prop, N_same_prop)]
cross_ploidy_expected[, .(Family, `P-value from Chi-Square test`)][
assoc_data_updat, on = .(Family)
][, .(-N_cross_prop, -N_same_prop)]
cross_ploidy_expected[, .(Family, `P-value from Chi-Square test`)][
assoc_data_updat, on = .(Family)
][, c("N_cross_prop", "N_same_prop") := NULL]
cross_ploidy_expected
cross_ploidy_expected[, .(Family, `P-value from Chi-Square test`)][
assoc_data_updat, on = .(Family)
][, c("N_cross_prop", "N_same_prop") := NULL]
cross_ploidy_expected[, .(Family, `P-value from Chi-Square test`)][
assoc_data_updat, on = .(Family)
][, c("N_cross_prop", "N_same_prop") := NULL]
cross_ploidy_expected[, .(Family, `P-value from Chi-Square test`)][
assoc_data_updat, on = .(Family)
][, c("N_cross_prop", "N_same_prop") := NULL]
cross_ploidy_expected[, .(Family, `P-value from Chi-Square test`)][
assoc_data_updat, on = .(Family)
][, c("N_cross_prop", "N_same_prop") := NULL]
assoc_data_update <- cross_ploidy_expected[, .(Family, `P-value from Chi-Square test`)][
assoc_data_updat, on = .(Family)
]
assoc_data_updat[, c("N_cross_prop", "N_same_prop") := NULL]
assoc_data_updat
assoc_data_updat
assoc_data_update[, c("N_cross_prop", "N_same_prop") := NULL]
assoc_data_update
fwrite(assoc_data_update, "./data/Cross_ploidy_families_update.csv")
360000 * 0.01
